async function crearAtencion(req: Request, res: Response) {
  try {
    const { cliente: idCliente, peluquero: idPeluquero, servicios: serviciosIds, fechaInicio } = req.body;

    if (!idCliente || !idPeluquero || !serviciosIds?.length || !fechaInicio) {
      return res.status(400).json({ message: "Faltan datos obligatorios" });
    }

    const cliente = await em.findOneOrFail(Persona, { idPersona: idCliente });
    const peluquero = await em.findOneOrFail(Persona, { idPersona: idPeluquero });

    const servicios = await em.find(Servicio, { codServicio: { $in: serviciosIds } });
    const duracionTotal = servicios.reduce((sum, s) => sum + s.cantTurnos, 0);

    // ------------------- Buscar bloques libres -------------------
    const todosBloques = await em.find(Bloque, {});
    const bloquesLibres: Bloque[] = [];

    for (const bloque of todosBloques) {
      const turnosOcupados = await em.count(Turno, { bloque, estado: { $ne: "disponible" } });
      if (turnosOcupados === 0) bloquesLibres.push(bloque);
    }

    if (bloquesLibres.length < duracionTotal) {
      return res.status(400).json({ message: "No hay suficientes bloques libres para los servicios seleccionados" });
    }

    // ------------------- Buscar bloques consecutivos -------------------
    const ordenados = bloquesLibres.sort((a, b) => a.horaInicio.localeCompare(b.horaInicio));
    let secuencia: Bloque[] = [];

    for (let i = 0; i <= ordenados.length - duracionTotal; i++) {
      const tempSeq = ordenados.slice(i, i + duracionTotal);
      const consecutivos = tempSeq.every((bl, idx) => idx === 0 || bl.horaInicio === tempSeq[idx - 1].horaFin);
      if (consecutivos) {
        secuencia = tempSeq;
        break;
      }
    }

    if (secuencia.length !== duracionTotal) {
      return res.status(400).json({ message: "No se encontraron bloques consecutivos disponibles para la duraci贸n de los servicios" });
    }

    // ------------------- Crear atenci贸n -------------------
    const atencion = new Atencion();
    atencion.cliente = cliente;
    atencion.peluquero = peluquero;
    atencion.fechaInicio = new Date(fechaInicio);
    atencion.estado = "pendiente";

    // ------------------- Asociar servicios -------------------
    for (const servicio of servicios) {
      atencion.servicios.add(servicio);
    }

    // ------------------- Crear turnos -------------------
    for (const bloque of secuencia) {
      const turno = new Turno();
      turno.estado = "pendiente";
      turno.bloque = bloque;
      turno.atencion = atencion;
      atencion.turnos.add(turno);
    }

    await em.persistAndFlush(atencion);

    return res.json({
      message: "Atenci贸n creada correctamente",
      atencionId: atencion.idAtencion,
      bloques: secuencia.map(b => ({ idBloque: b.idBloque, inicio: b.horaInicio, fin: b.horaFin })),
    });

  } catch (error: any) {
    console.error(error);
    return res.status(500).json({ message: "Error al crear la atenci贸n", error: error.message });
  }
}
